name: 🔎 Continuous Integration

on:
  push:
    branches: [main]
  pull_request:

jobs:
  style:
    name: 🌙 Style Check
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
      - name: 📦 Setup Lua
        uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          args: --check lua

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
      - name: 📦 Setup Neovim
        uses: ./.github/workflows/_neovim.yml
        with:
          version: stable
      - name: 🪇 Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y libreadline-dev
      - name: 🌵 Test Cache
        uses: actions/cache@v4
        with:
          path: .test
          key: cache-${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: 🧪 Run Tests
        run: |
          nvim --version
          if [ ! -d tests ]; then
              echo "⚠️ No tests found, skipping tests."
              exit 0
          fi
          nvim --headless -u tests/init.lua -c "PlenaryBustedDirectory tests/ {minimal_init = 'tests/init.lua', sequential = true}"

  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test
    if: !failure() && github.ref == 'refs/heads/main'
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
      - name: 🛟 Pull New Things
        run: git pull
      - name: 📦 Setup Neovim
        uses: ./.github/workflows/_neovim.yml
      - name: 🐴 Panvimdoc
        uses: kdheepak/panvimdoc@main
        with:
          vimdoc: vesper.nvim
          version: 'Neovim'
          demojify: true
          treesitter: true
      - name: 😻 Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore(build): auto-generate documentation'

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: test
    if: !failure() && github.ref == 'refs/heads/main'
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
      - name: ⚙️ Release Please Config
        id: release-please-config
        run: |
          if [ -f .github/release-please-config.json ]; then
              echo "config-file=.github/release-please-config.json" >> $GITHUB_OUTPUT
              [ -f .github/release-please-manifest.json ] &&
              echo "manifest-file=.github/release-please-manifest.json" >> $GITHUB_OUTPUT
              [ -f .github/.release-please-manifest.json ] &&
              echo "manifest-file=.github/.release-please-manifest.json" >> $GITHUB_OUTPUT
          else
              echo "release-type=simple" >> $GITHUB_OUTPUT
          fi
      - name: 🙏🏻 Release Please
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          config-file: ${{ steps.release-please-config.outputs.config-file }}
          release-type: ${{ steps.release-please-config.outputs.release-type }}
          manifest-file: ${{ steps.release-please-config.outputs.manifest-file }}
      - name: 💪🏻 Tag Stable Version
        if: steps.release-please.outputs.release_created
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/google-github-actions/release-please-action.git"
          git tag -d stable || true
          git push origin :stable || true
          git tag -a stable -m "Last Stable Release"
          git push origin stable
